---
autogen: This file was automatically generated by kernel-doc-text-to-markdown.py
kernel_version: 4.4.19-15-ev3dev-ev3
source_file: drivers/lego/motors/servo_motor_class.c
title: Servo Motor Class
---

The `servo-motor` class provides a uniform interface for using [hobby type
servo motors](https://en.wikipedia.org/wiki/Servo_%28radio_control%29).

### sysfs Attributes

Servo motors can be found at `/sys/class/servo-motor/motor<N>`, where `<N>`
is incremented each time a servo is loaded (it is not related to which port
the motor is plugged in to).

`address`
: (read-only) Returns the name of the port that the motor is connected to.

`command`
: (write-only) Sets the command for the servo. Possible values are:

    - `run`: Causes the servo to be driven to the position set in the
      `position_sp` attribute.
    - `float`: Removes power from the motor.

`driver_name`
: (read-only) Returns the name of the motor driver that loaded this device.
See the listof [supported devices] for a list of drivers.

`max_pulse_sp`
: (read/write) Used to set the pulse size in milliseconds for the signal that
tells the servo to drive to the maximum (clockwise) position_sp. Default
value is 2400. Valid values are 2300 to 2700. You must write to the
`position_sp` attribute for changes to this attribute to take effect.

`mid_pulse_sp`
: (read/write) Used to set the pulse size in milliseconds for the signal that
tells the servo to drive to the mid position_sp. Default value is 1500.
Valid values are 1300 to 1700. For example, on a 180 degree servo, this
would be 90 degrees. On continuous rotation servo, this is the "neutral"
position where the motor does not turn. You must write to the `position_sp`
attribute for changes to this attribute to take effect.

`min_pulse_sp`
: (read/write) Used to set the pulse size in milliseconds for the signal
that tells the servo to drive to the minimum (counter-clockwise) position.
Default value is 600. Valid values are 300 to 700. You must write to the
`position_sp` attribute for changes to this attribute to take effect.

`polarity`
: (read/write) Sets the polarity of the servo. Valid values are:

    - `normal`: Causes the `position_sp` attribute to act in the usual manner.
    - `inversed`: Causes the `position_sp` value to be inverted. i.e `-100`
       will correspond to `max_pulse_sp`, and `100` will correspond to
      `min_pulse_sp`.

`position_sp`
: (read/write) Reading returns the current position_sp of the servo. Writing
instructs the servo to move to the specified position_sp. Units are percent.
Valid values are -100 to 100 (-100% to 100%) where `-100` corresponds to
`min_pulse_sp`, `0` corresponds to `mid_pulse_sp` and `100` corresponds to
`max_pulse_sp`.

`rate_sp`
: (read/write) Sets the rate_sp at which the servo travels from 0 to 100.0%
(half of the full range of the servo). Units are in milliseconds. Example:
Setting `rate_sp` to 1000 means that it will take a 180 degree servo 2
seconds to move from 0 to 180 degrees. Note: Some servo controllers may not
support this in which case reading and writing will fail with `-EOPNOTSUPP`.
In continuous rotation servos, this value will affect the rate at which the
speed ramps up or down.

`state`
: (read-only)Returns a space separated list of flags indicating the state of
the servo. Possible flag is:

    - `running`: Indicates that the motor is powered.

[supported devices]: /docs/motors/#supported-devices

