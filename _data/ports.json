[
    {
        "connection_types": "NXT/Analog, NXT/I2C, EV3/Analog, EV3/UART",
        "description": "Dexter Industries BrickPi Input Port",
        "mode_info": [
            {
                "description": "No sensor",
                "id": "BRICKPI_IN_PORT_MODE_NONE",
                "name": "none"
            },
            {
                "description": "NXT/Analog sensor",
                "id": "BRICKPI_IN_PORT_MODE_NXT_ANALOG",
                "name": "nxt-analog",
                "name_footnote": "[^nxt-analog-mode]",
                "notes": "\n[^nxt-analog-mode]: The [nxt-analog] driver will be loaded when\n    this mode is set. You must manually specify the correct\n    driver for your sensor using `set_device` if you want to use\n    another driver. Any driver with a connection type of\n    NXT/Analog is allowed.\n    ^\n    [nxt-analog]: /docs/sensors/generic-nxt-analog-sensor\n    \n    "
            },
            {
                "description": "LEGO NXT Color sensor",
                "id": "BRICKPI_IN_PORT_MODE_NXT_COLOR",
                "name": "nxt-color"
            },
            {
                "description": "NXT/I2C sensor",
                "id": "BRICKPI_IN_PORT_MODE_NXT_I2C",
                "name": "nxt-i2c",
                "name_footnote": "[^nxt-i2c-mode]",
                "notes": "\n[^nxt-i2c-mode]: No sensors are loaded by default. You must\n    manually specify the sensor that is connected and its address\n    by using the `set_device` attribute. This is equivalent to\n    [manually loading] I2C devices. The sensor port address will\n    be the BrickPi port address with \":i2c\" and the decimal I2C\n    address appended. The [BrickPi I2C sensor page] has information\n    regarding the use of sensors connected to a brickpi-in-port.\n    ^\n    [manually loading]: /docs/sensors/using-i2c-sensors/#manually-loading-devices\n    [BrickPi I2C sensor]: /docs/drivers/brickpi-i2c-sensor/\n    \n    "
            },
            {
                "description": "EV3/Analog sensor",
                "id": "BRICKPI_IN_PORT_MODE_EV3_ANALOG",
                "name": "ev3-analog",
                "name_footnote": "[^ev3-analog-mode]",
                "notes": "\n[^ev3-analog-mode]: Only the LEGO EV3 Touch sensor is supported.\n    The driver will load by default.\n    \n    "
            },
            {
                "description": "EV3/UART sensor",
                "id": "BRICKPI_IN_PORT_MODE_EV3_UART",
                "name": "ev3-uart",
                "name_footnote": "[^ev3-uart-mode]",
                "notes": "\n[^ev3-uart-mode]: Only the LEGO EV3 Ultrasonic, Color, Gyro,\n    and Infrared sensors are supported. They cannot be automatically\n    detected, so you must specify the sensor manually using the\n    `set_device` attribute. No sensors are loaded by default.\n    \n    "
            }
        ],
        "module": "brickpi-ports-in",
        "name": "brickpi-in-port",
        "num_modes": 6,
        "prefix": "in",
        "source_file": "drivers/lego/brickpi/brickpi_ports_in.c",
        "source_line": 57,
        "url_name": "brickpi-in-port"
    },
    {
        "connection_types": "tacho-motor, dc-motor, led",
        "description": "Dexter Industries BrickPi Output Port",
        "mode_info": [
            {
                "description": "NXT/EV3 Large Motor",
                "id": "BRICKPI_OUT_PORT_MODE_TACHO_MOTOR",
                "name": "tacho-motor"
            },
            {
                "description": "RCX/Power Functions motor",
                "id": "BRICKPI_OUT_PORT_MODE_DC_MOTOR",
                "name": "dc-motor"
            },
            {
                "description": "RCX/Power Functions LED",
                "id": "BRICKPI_OUT_PORT_MODE_LED",
                "name": "led"
            }
        ],
        "module": "brickpi-ports-out",
        "name": "brickpi-out-port",
        "num_modes": 3,
        "prefix": "out",
        "source_file": "drivers/lego/brickpi/brickpi_ports_out.c",
        "source_line": 54,
        "url_name": "brickpi-out-port"
    },
    {
        "connection_types": "NXT/I2C, NXT/Analog",
        "description": "HiTechnic NXT Sensor Multiplexer Input Port",
        "mode_info": [
            {
                "description": "NXT/Analog sensor",
                "id": "HT_NXT_SMUX_PORT_MODE_ANALOG",
                "name": "analog",
                "name_footnote": "[^analog-mode]",
                "notes": "\n[^analog-mode]: The [nxt-analog] driver will be loaded when\n    this mode is set. You must manually specify the correct\n    driver for your sensor using `set_device` if you want to use\n    another driver. Any driver with a connection type of\n    NXT/Analog is allowed.\n    ^\n    [nxt-analog]: /docs/sensors/generic-nxt-analog-sensor\n    \n    "
            },
            {
                "description": "NXT/I2C sensor",
                "id": "HT_NXT_SMUX_PORT_MODE_I2C",
                "name": "i2c",
                "name_footnote": "[^i2c-mode]",
                "notes": "\n[^i2c-mode]: If one of the supported sensors was detected\n    by invoking the `DETECT` command on the [ht-nxt-smux]\n    associated with this port, then the appropriate driver will\n    be automatically loaded. Otherwise, you can use `set_device`\n    to load the correct driver for your sensor. Any driver with\n    a connection type of NXT/I2C is allowed.\n    ^\n    [ht-nxt-smux]: /docs/sensors/hitechnic-nxt-sensor-multiplexer\n    \n    "
            }
        ],
        "module": "ht-nxt-smux",
        "name": "ht-nxt-smux-port",
        "notes": "\n[^address-prefix]: The full `address` is in the format:\n    ^\n           [<parent-address>:]mux<n>\n    ^\n       For example, if we are looking at port 1 of this mux plugged into\n       input port 2 on the EV3, the address will be `in2:i2c08:mux1`.\n    \n    ",
        "num_modes": 2,
        "prefix": "mux",
        "prefix_footnote": "[^address-prefix]",
        "source_file": "drivers/lego/sensors/ht_nxt_smux.c",
        "source_line": 39,
        "url_name": "ht-nxt-smux-port"
    },
    {
        "connection_types": "NXT/Analog, NXT/I2C, Other/I2C, EV3/Analog, EV3/UART, Other/UART",
        "description": "EV3 Input Port",
        "mode_info": [
            {
                "description": "Automatically detect sensors.",
                "id": "EV3_INPUT_PORT_MODE_AUTO",
                "name": "auto",
                "name_footnote": "[^auto-mode]",
                "notes": "\n[^auto-mode]: In auto mode, the port will attempt to\n    automatically detect the type of sensor that was connected\n    and load the appropriate driver. See the list of [supported\n    sensors] to determine if a sensor can be automatically\n    detected.\n    ^\n    [supported sensors]: /docs/sensors/#supported-sensors\n    \n    "
            },
            {
                "description": "Load the [nxt-analog] device.",
                "id": "EV3_INPUT_PORT_MODE_NXT_ANALOG",
                "name": "nxt-analog",
                "name_footnote": "[^nxt-analog-mode]",
                "notes": "\n[^nxt-analog-mode]: This loads the [generic NXT/Analog sensor]\n    [nxt-analog] driver. Use `set_device` to load the appropriate\n    device/driver.\n    ^\n    [nxt-analog]: /docs/sensors/generic-nxt-analog-sensor\n    \n    "
            },
            {
                "description": "Load the [nxt-color-sensor] device.",
                "id": "EV3_INPUT_PORT_MODE_NXT_COLOR",
                "name": "nxt-color",
                "name_footnote": "[^nxt-color-mode]",
                "notes": "\n[^nxt-color-mode]: NXT Color sensor driver has not been\n    implemented yet, so right now, this mode does nothing.\n    \n    "
            },
            {
                "description": "Configure for I2C communications and load the [nxt-i2c-host] device.",
                "id": "EV3_INPUT_PORT_MODE_NXT_I2C",
                "name": "nxt-i2c"
            },
            {
                "description": "Configure for I2C communications but do not probe for NXT sensors.",
                "id": "EV3_INPUT_PORT_MODE_OTHER_I2C",
                "name": "other-i2c"
            },
            {
                "description": "Load the [ev3-analog] device.",
                "id": "EV3_INPUT_PORT_MODE_EV3_ANALOG",
                "name": "ev3-analog"
            },
            {
                "description": "Configure for UART communications and load the [ev3-uart-host] device.",
                "id": "EV3_INPUT_PORT_MODE_EV3_UART",
                "name": "ev3-uart"
            },
            {
                "description": "Configure for UART communications but do not load any device.",
                "id": "EV3_INPUT_PORT_MODE_OTHER_UART",
                "name": "other-uart"
            },
            {
                "description": "Provide access to low level drivers.",
                "id": "EV3_INPUT_PORT_MODE_RAW",
                "name": "raw",
                "name_footnote": "[^raw-mode]",
                "notes": "\n[^raw-mode]: Exports gpios and analog/digital converter values\n    to sysfs so that they can be controlled directly.\n    \n    "
            }
        ],
        "module": "legoev3-ports",
        "name": "legoev3-input-port",
        "num_modes": 9,
        "prefix": "in",
        "source_file": "drivers/lego/ev3/legoev3_ports_in.c",
        "source_line": 293,
        "url_name": "legoev3-input-port"
    },
    {
        "connection_types": "tacho-motor, dc-motor, led",
        "description": "EV3 Output Port",
        "mode_info": [
            {
                "description": "Automatically detect motors when they are connected.",
                "id": "EV3_OUTPUT_PORT_MODE_AUTO",
                "name": "auto",
                "name_footnote": "[^auto-mode]",
                "notes": "\n[^auto-mode]: Only the EV3/NXT large motors and the EV3\n    medium motor can be automatically detected. All other devices\n    must be manually configured.\n    \n    "
            },
            {
                "description": "Load the [tacho-motor] device.",
                "id": "EV3_OUTPUT_PORT_MODE_TACHO_MOTOR",
                "name": "tacho-motor",
                "name_footnote": "[^tacho-motor-mode]",
                "notes": "\n[^tacho-motor-mode]: Configures the port to use the\n    [tacho-motor] driver module. The default driver is the\n    EV3 Large Motor (`lego-ev3-l-motor`). You can change\n    the driver using the `set_device` attribute.\n    ^\n    [tacho-motor]: /docs/drivers/tacho-motor-class\n    \n    "
            },
            {
                "description": "Load the [dc-motor] device.",
                "id": "EV3_OUTPUT_PORT_MODE_DC_MOTOR",
                "name": "dc-motor",
                "name_footnote": "[^dc-motor-mode]",
                "notes": "\n[^dc-motor-mode]: This can be use with MINDSTORMS RCX\n    motors, Power Functions motors and any other 'plain' DC\n    motor. By 'plain', we mean the motor is just a motor without\n    any feedback.\n    ^\n    [dc-motor]: /docs/drivers/dc-motor-class\n    \n    "
            },
            {
                "description": "Load the [led] device.",
                "id": "EV3_OUTPUT_PORT_MODE_LED",
                "name": "led",
                "name_footnote": "[^led-mode]",
                "notes": "\n[^led-mode]: This can be used with MINDSTORMS RCX LEDs,\n    Power Functions LEDs or any other LED connected to pins 1\n    and 2 of the output port.\n    ^\n    [led]: /docs/drivers/rcx-led\n    \n    "
            },
            {
                "description": "Provide access to low level drivers.",
                "id": "EV3_OUTPUT_PORT_MODE_RAW",
                "name": "raw",
                "name_footnote": "[^raw-mode]",
                "notes": "\n[^raw-mode]: Exports gpios, pwm and analog/digital converter\n    values to sysfs so that they can be controlled directly.\n    \n    "
            }
        ],
        "module": "legoev3-ports",
        "name": "legoev3-output-port",
        "num_modes": 5,
        "prefix": "out",
        "source_file": "drivers/lego/ev3/legoev3_ports_out.c",
        "source_line": 110,
        "url_name": "legoev3-output-port"
    },
    {
        "connection_types": "EV3/UART, EV3/Analog",
        "description": "mindsensors.com EV3 Sensor Multiplexer Input Port",
        "mode_info": [
            {
                "description": "EV3/UART sensor",
                "id": "MS_EV3_SMUX_MODE_UART",
                "name": "uart",
                "name_footnote": "[^uart-mode]",
                "notes": "\n[^uart-mode]: UART sensor types are not automatically\n    detected. By default, the `lego-ev3-color` driver\n    will be loaded when this mode is set.\n    Use `set_device` to load other sensor devices/drivers.\n    \n    Supported sensors are:\n    \n    | Sensor Name         | Device/Driver Name |\n    |---------------------|--------------------|\n    | LEGO EV3 Color      | `lego-ev3-color`   |\n    | LEGO EV3 Ultrasonic | `lego-ev3-us`      |\n    | LEGO EV3 GYRO       | `lego-ev3-gyro`    |\n    | LEGO EV3 Infrared   | `lego-ev3-ir`      |\n    \n    "
            },
            {
                "description": "EV3/Analog sensor",
                "id": "MS_EV3_SMUX_MODE_ANALOG",
                "name": "analog",
                "name_footnote": "[^analog-mode]",
                "notes": "\n[^analog-mode]: Currently only the LEGO EV3 Touch sensor is\n    supported. The `lego-ev3-touch` device/driver is loaded when\n    this mode is set.\n    \n    "
            }
        ],
        "module": "ms-ev3-smux",
        "name": "ms-ev3-smux-port",
        "notes": "\n[^address-prefix]: The full `address` is in the format:\n    ^\n           [<parent-address>:]mux<n>\n    ^\n       For example, if we are looking at port 1 of this mux plugged into\n       input port 2 on the EV3, the address will be `in2:i2c50:mux1`.\n    \n    ",
        "num_modes": 2,
        "prefix": "mux",
        "prefix_footnote": "[^address-prefix]",
        "source_file": "drivers/lego/sensors/ms_ev3_smux.c",
        "source_line": 42,
        "url_name": "ms-ev3-smux-port"
    },
    {
        "connection_types": "tacho-motor",
        "description": "mindsensors.com NXTMMX Output Port",
        "mode_info": [
            {
                "description": "NXT/EV3 Large Motor",
                "id": "MS_NXTMMX_OUT_PORT_MODE_TACHO_MOTOR",
                "name": "tacho-motor"
            }
        ],
        "module": "ms-nxtmmx",
        "name": "ms-nxtmmx-out-port",
        "notes": "\n[^prefix]: The full address will be something like `in2:i2c3:M1`\n    depending on what port the motor multiplexer is plugged into.\n    \n    ",
        "num_modes": 1,
        "prefix": "M",
        "prefix_footnote": "[^prefix]",
        "source_file": "drivers/lego/sensors/ms_nxtmmx.c",
        "source_line": 139,
        "url_name": "ms-nxtmmx-out-port"
    },
    {
        "connection_types": "NXT/Analog, NXT/Color, NXT/I2C, Other/I2C, EV3/Analog, EV3/UART",
        "description": "mindsensors.com PiStorms Input Port",
        "mode_info": [
            {
                "description": "No sensor",
                "id": "PS_IN_PORT_MODE_NONE",
                "name": "none"
            },
            {
                "description": "NXT/Analog sensor",
                "id": "PS_IN_PORT_MODE_NXT_ANALOG",
                "name": "nxt-analog",
                "name_footnote": "[^nxt-analog-mode]",
                "notes": "\n[^nxt-analog-mode]: The generic [nxt-analog] driver will be\n    loaded when this mode is set. You must manually specify the\n    correct driver for your sensor using `set_device` if you want\n    to use another driver. Any driver with a connection type of\n    NXT/Analog is allowed.\n    ^\n    [nxt-analog]: /docs/sensors/generic-nxt-analog-sensor\n    \n    "
            },
            {
                "description": "NXT/Color sensor",
                "id": "PS_IN_PORT_MODE_NXT_COLOR",
                "name": "nxt-color"
            },
            {
                "description": "I2C pass through",
                "id": "PS_IN_PORT_MODE_I2C_THRU",
                "name": "i2c-thru",
                "name_footnote": "[^i2c-thru-mode]",
                "notes": "\n[^i2c-thru-mode]: I2C signals are passed through the\n    input port to `i2c_arm` on the Raspberry Pi. This means that\n    all 4 input ports share the same I2C master and the devices\n    must have different addresses even if they are connected to\n    different ports on the PiStorms. Additionally, the LEGO NXT\n    Ultrasonic sensor is not supported on the PiStorms.\n    ^\n    NXT/I2C sensors will be automatically detected, otherwise\n    you must manually specify the sensor that is connected by\n    using the `set_device` attribute.\n    \n    "
            },
            {
                "description": "EV3/Analog sensor",
                "id": "PS_IN_PORT_MODE_EV3_ANALOG",
                "name": "ev3-analog",
                "name_footnote": "[^ev3-analog-mode]",
                "notes": "\n[^ev3-analog-mode]: Only the LEGO EV3 Touch sensor is supported.\n    The driver will load by default.\n    \n    "
            },
            {
                "description": "EV3/UART sensor",
                "id": "PS_IN_PORT_MODE_EV3_UART",
                "name": "ev3-uart",
                "name_footnote": "[^ev3-uart-mode]",
                "notes": "\n[^ev3-uart-mode]: Only the LEGO EV3 Ultrasonic, Color, Gyro,\n    and Infrared sensors are supported. When this mode is set,\n    a sensor device will be registered for the type of sensor\n    that is attached (or was most recently attached).\n    \n    "
            }
        ],
        "module": "pistorms-ports-in",
        "name": "pistorms-in-port",
        "notes": "\n[^address-prefix]: The full `address` is in the format:\n    ^\n           pistorms:B<b>:<prefix><n>\n    ^\n       For example, if we are looking at the port labeled \"BBS2\" on the\n       PiStorms, the address will be `pistorms:BB:S2`.\n    \n    ",
        "num_modes": 6,
        "prefix": "S",
        "prefix_footnote": "[^address-prefix]",
        "source_file": "drivers/lego/pistorms/pistorms_ports_in.c",
        "source_line": 134,
        "url_name": "pistorms-in-port"
    },
    {
        "connection_types": "tacho-motor",
        "description": "mindsensors.com PiStorms Output Port",
        "mode_info": [
            {
                "description": "NXT/EV3 Large Motor",
                "id": "PISTORMS_OUT_PORT_MODE_TACHO_MOTOR",
                "name": "tacho-motor"
            }
        ],
        "module": "pistorms-ports-out",
        "name": "pistorms-out-port",
        "notes": "\n[^prefix]: The full address will be something like `pistorms:BAM1`.\n    \n    ",
        "num_modes": 1,
        "prefix": "M",
        "prefix_footnote": "[^prefix]",
        "source_file": "drivers/lego/pistorms/pistorms_ports_out.c",
        "source_line": 31,
        "url_name": "pistorms-out-port"
    },
    {
        "connection_types": "WeDo/Analog, dc-motor, led",
        "description": "LEGO WeDo Port",
        "mode_info": [
            {
                "description": "The attached device is automatically detected.",
                "id": "0",
                "name": "auto"
            }
        ],
        "module": "wedo",
        "name": "wedo-port",
        "notes": "\n[^address-prefix]: The full `address` is in the format:\n    ^\n           usb<usb-path>:wedo<n>\n    ^\n       The USB path might be something like `1-1.3:1.0`. Read more about\n       it [here](http://gajjarpremal.blogspot.in/2015/04/sysfs-structures-for-linux-usb.html).\n       Run `lsusb -t` to help figure out the correct path for your WeDo hub.\n    ^\n       For example, this...\n    ^\n            /:  Bus 05.Port 1: Dev 1, Class=root_hub, Driver=ehci-pci/4p, 480M\n                |__ Port 4: Dev 5, If 0, Class=Hub, Driver=hub/4p, 480M\n                    |__ Port 2: Dev 6, If 0, Class=Human Interface Device, Driver=wedo, 1.5M\n    ^\n       ...translates to `usb5-4.2:1.0:wedo1`. You can see how `Bus 05`,\n       `Port 4` and `Port 2` result in `5-4.2`. The last bit (configuration\n       and interface) will always be `:1.0`.\n    \n    ",
        "num_modes": 1,
        "prefix": "wedo",
        "prefix_footnote": "[^address-prefix]",
        "source_file": "drivers/lego/wedo/wedo_port.c",
        "source_line": 417,
        "url_name": "wedo-port"
    }
]
